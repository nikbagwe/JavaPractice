JAVA Notes:

Method ->
Business Logic (re-usability)
it can return value
----------------------------------------------------------

Constructor ->
Restricting of Object Creation
To initialize class variable with initial value
can not return any value
No void can be used.
name should be same as ClassName

----------------------------------------------------------

Static method-> calling by ClassName
Non Static -> call by object name
constructor -> when we create the object

----------------------------------------------------------

Encapsulation

'this' keyword can be used in methods as well.
Encapsulation is the concept of bundling data (variables) and methods (functions) that operate on the data
into a single unit, typically a class. In Java, encapsulation is implemented by making class variables private
to restrict direct access and providing public getters and setters to access and modify these private variables.

This approach ensures that private data is accessed and modified only through a controlled public interface,
enforcing data hiding and better control over the behavior of the class.


-Encapsulation means accessing the private properties(variables) of class from another class using the getter and setter method

-Getter and setter are always public methods
-Instead of setter we can also initialize the private variable values using parameterized constructor but
to update the values of private variables we would need setter method anyways.

---------------------------------------------------------------------------------------------

Inheritance:

isaRelationship ---->  Inheritance.

Method Overriding -> Run Time Polymorphism
->When you have a method in parent class and same method in child class
1. With the same name
2. With the same number of parameter
3. With the same sequence of parameters
4. With the same return type

use of method overriding
it gives child class authority to override the parent method as per the requirement in child class


Example

Parent Class ->

public Class Car {

int wheels;
double price;

public void start()
{
System.out.println("Car Start");
}

Child class
public class BMW extends Car {

@Override // notation to show its overriden class , not compulsory bt good practice
public void start()

{
System.out.println("BMW Start");
}
--------------------------------------------

In Above example, car (parent class) And BMW(Child class) has same start() method. so its an override class
as it has
same name -> Start()
same number of parameters -> 0 paramters passed
same return type  -> void
same sequence of params -> Not Applicable here

so this is method overriding.

Multilevel inheritance is allowed till n levels
Multiple inheritance is not allowed i.e. one child class can not have multiple parents
One parent can have multiple child classes but one sibling can not access properties of its sibling


Use of Inheritance
-> If any class A (parent) has already designed methods which can be reused by other classes(child classes)
 as well then we can use inheritance.

Inheritance can be done only in Child to parent, grandparents and so on.
-----------------------------------------------------------------------------------------
-> Child class objects can be referred by parent(grand parent and so on) class reference variable,
this is called top casting or upcasting.

Example
BWM (child) -> Car (parent)

Car c1 = new BMW();

Object is of BMW, so all the methods of BMW will be given to object
So when we call any method for c1 refernce variables it will call methods inherited and overriden methods
in BMW objects. It can not access BMW individual methods.

Reason:
Java does reference type check, whenever we are doing the typecasting, it checks if its overridden or inherited from
reference class in this case CAR class if reference type (Car c1)

so if only BMW has autoparking() method which is individual method then it can not be accessed by object created by
Car c1 = new BMW();

it will only allow to access methods inherited or overriden from Car class.
